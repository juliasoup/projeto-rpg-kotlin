package com.example.ktrpg

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.example.ktrpg.*

@Composable
fun CharacterScreen(vm: CharacterViewModel) {
    val estilo by remember { derivedStateOf { vm.estilo } }
    val generated by remember { derivedStateOf { vm.generatedValues } }
    val available by remember { derivedStateOf { vm.availableValues } }
    val assigned by remember { derivedStateOf { vm.assignedAttributes } }

    val raceIndex by remember { derivedStateOf { vm.selectedRaceIndex } }
    val classIndex by remember { derivedStateOf { vm.selectedClassIndex } }

    var name by remember { mutableStateOf("SeuNome") }
    var showFicha by remember { mutableStateOf("") }

    val attrsLabels = listOf("Força","Destreza","Constituição","Inteligência","Sabedoria","Carisma")

    Column(modifier = Modifier
        .fillMaxSize()
        .padding(16.dp)
        .verticalScroll(rememberScrollState())
    ) {

        Text("Criador de Personagem", style = MaterialTheme.typography.headlineMedium)

        Spacer(modifier = Modifier.height(12.dp))

        Text("Estilo de Atributos")
        Row {
            RadioButtonRow("Clássico", EstiloDistribuicao.CLASSICO, vm)
            RadioButtonRow("Aventureiro", EstiloDistribuicao.AVENTUREIRO, vm)
            RadioButtonRow("Heroico", EstiloDistribuicao.HEROICO, vm)
        }

        Spacer(modifier = Modifier.height(12.dp))

        Text("Raça")
        val races = listOf("Humano","Elfo","Meio-Demônio")
        DropdownSelector(selectedIndex = raceIndex, options = races) { vm.setRaceIndex(it) }

        Spacer(modifier = Modifier.height(12.dp))

        Text("Classe")
        val classes = listOf("Bardo","Druida","Mago")
        DropdownSelector(selectedIndex = classIndex, options = classes) { vm.setClassIndex(it) }

        Spacer(modifier = Modifier.height(12.dp))

        Button(onClick = { vm.gerarRolagens() }) {
            Text("Gerar Atributos")
        }

        Spacer(modifier = Modifier.height(12.dp))

        if (generated.isNotEmpty()) {
            Text("Rolagens: ${generated.joinToString()}")
            Spacer(modifier = Modifier.height(8.dp))
        }

        if (estilo == EstiloDistribuicao.CLASSICO && generated.isNotEmpty()) {
            Text("Modo Clássico: Atribuído na ordem padrão.")
            attrsLabels.forEachIndexed { idx, label ->
                Text("$label: ${generated.getOrNull(idx) ?: "-"}")
            }
        } else if ((estilo == EstiloDistribuicao.AVENTUREIRO || estilo == EstiloDistribuicao.HEROICO) && generated.isNotEmpty()) {
            Text("Distribua os valores entre os atributos (clique e selecione).")
            Spacer(modifier = Modifier.height(8.dp))
            Text("Valores disponíveis: ${available.joinToString()}")
            Spacer(modifier = Modifier.height(8.dp))

            attrsLabels.forEachIndexed { idx, label ->
                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
                    Text(label, modifier = Modifier.weight(1f))
                    ValuePicker(
                        current = assigned[idx],
                        availableValues = available,
                        onSelect = { value -> vm.assignValueToAttribute(idx, value) }
                    )
                }
                Divider(modifier = Modifier.padding(vertical = 6.dp))
            }
        }

        Spacer(modifier = Modifier.height(12.dp))

        OutlinedTextField(
            value = name,
            onValueChange = { name = it },
            label = { Text("Nome do personagem") },
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(8.dp))

        Button(onClick = {
            val personagem = vm.buildPersonagem(name)
            showFicha = personagem.exibirFicha()
        }) {
            Text("Criar e Mostrar Ficha")
        }

        Spacer(modifier = Modifier.height(16.dp))

        if (showFicha.isNotBlank()) {
            Text(text = "Ficha:", style = MaterialTheme.typography.headlineMedium)
            Spacer(modifier = Modifier.height(8.dp))
            Text(showFicha)
        }
    }
}

@Composable
private fun RadioButtonRow(label: String, value: EstiloDistribuicao, vm: CharacterViewModel) {
    Row(
        verticalAlignment = Alignment.CenterVertically,
        modifier = Modifier.padding(end = 8.dp)
    ) {
        RadioButton(selected = vm.estilo == value, onClick = { vm.estilo = value })
        Spacer(Modifier.width(4.dp))
        Text(label, modifier = Modifier.clickable { vm.estilo = value })
    }
}

@Composable
fun DropdownSelector(selectedIndex: Int, options: List<String>, onSelected: (Int)->Unit) {
    var expanded by remember { mutableStateOf(false) }
    val label = options.getOrNull(selectedIndex) ?: options.first()

    Box {
        OutlinedButton(onClick = { expanded = true }) {
            Text(label)
        }
        DropdownMenu(expanded = expanded, onDismissRequest = { expanded = false }) {
            options.forEachIndexed { idx, s ->
                DropdownMenuItem(
                    text = { Text(s) },
                    onClick = {
                        onSelected(idx)
                        expanded = false
                    }
                )
            }
        }
    }
}

@Composable
fun ValuePicker(current: Int?, availableValues: List<Int>, onSelect: (Int?)->Unit) {
    var expanded by remember { mutableStateOf(false) }
    val display = current?.toString() ?: "Selecionar"

    Box {
        OutlinedButton(onClick = { expanded = true }) {
            Text(display)
        }
        DropdownMenu(expanded = expanded, onDismissRequest = { expanded = false }) {
            DropdownMenuItem(
                text = { Text("Remover") },
                onClick = {
                    onSelect(null)
                    expanded = false
                }
            )

            availableValues.distinct().forEach { v ->
                DropdownMenuItem(
                    text = { Text(v.toString()) },
                    onClick = {
                        onSelect(v)
                        expanded = false
                    }
                )
            }
        }
    }
}
